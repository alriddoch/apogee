Try replacing color based alpha code for terrain with alpha textures.

Use the vertex data as the texcoord data because its basically the same,
making using of the texture coord transform matrix to scale up.

Stick mipmaps on the terrain.

Move in near clipping plane to avoid loss of Z resolution.

Try re-working terrain so that there is a display list per-pass, with
no state changes in it, then try batching passes.

Need to get terrain tracking working right, preferably in a way that
handle parent tracking generically, and probably in conjunction
with sorting out the same in cyphesis.

See if we can get on-the-fly skybox rendering working. Needs render-to-texture.
Memory allocated by vertex buffers is now no longer required. Can scrap
vertex and surface caches at least.

Add some kind of check so render passes can be skipped for layers which just
don't apply. This will involve a bbox check for the simple banded renderers,
but a more complex trick for things like forest floor.
General mechanism established, but modifiers are not yet there, so its
not possible to consider how to do it there.

Memory allocated by vertex buffers is now no longer required. Vertex cache
gone, but it would probably be advantageous to clean up surface
buffers, etc. Also probably need some kind of caching scheme for the segment
display lists, as just letting them build up is bound to cause problems.

Modify the interface to entity renderers so that we provide an indication
of the camera position, so some kind of judgement can be made about how
much detail, and how the entity should be rendered. Make use of this
interface in the terrain renderer.

Add a 2D int map for storing display lists for terrain segments. Then
when we iterate over the apropriate area of terrain, we can query the
display list cache. Then we should no longer need the vertex cache, and
should be able to flush the surface buffers too.

Turn off depth write for subsequent passes in multi-pass.

Use short for index arrays, especially for terrain code.

For expo, change textures to nearest, and Lod to much lower.

Implement new Eris Entity class which carries pointer to associated terrain.
Use same technique for a whole load of other rubbish to do with rendering.
Perhaps a virtual method would help.

Draw roads on the terrain using a similar technique to the hull one. Drawing
vertically extended cuboids along the length of the roadwhich intersect with
the terrain to create the stencil data, and then draw the whole terrain using
this stencil to get the roads.

Terrain is now working better. Need to tie new tilemap code to heightmap code,
using triangle strips instead of those naughty quads.

Make terrain work.

Make light and sound work.

Implement a worldforge client.

Thoroughly test eris ingame code.

Thoroughly test eris outofgame code.

Once Eris is up and running, add code to handle other characters.

Add code to application which calcs character coord relative to root,
and sets renderer offset accordingly
